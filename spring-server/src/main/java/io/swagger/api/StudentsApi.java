/**
 * NOTE: This class is auto generated by the swagger code generator program (2.2.3).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.AssignStudentsRequest;
import io.swagger.model.AssignStudentsResponse;
import io.swagger.model.GenerationStudentsNumber;
import io.swagger.model.ListOfIdRequest;
import io.swagger.model.ListOfIdResponse;
import io.swagger.model.StudentsListResponse;
import io.swagger.model.UpdateStudentsRequest;
import io.swagger.model.UpdateStudentsResponse;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2017-10-10T10:52:14.903Z")

@Api(value = "students", description = "the students API")
public interface StudentsApi {

    @ApiOperation(value = "Assign students to the university", notes = "Returns assigned students' IDs", response = AssignStudentsResponse.class, tags={ "students", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = AssignStudentsResponse.class),
        @ApiResponse(code = 400, message = "Invalid input. Please check your input and try again later.", response = Void.class),
        @ApiResponse(code = 500, message = "Some internal server errors has occured. Please try again later.", response = Void.class) })
    
    @RequestMapping(value = "/students/assign/",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<AssignStudentsResponse> assignStudentsToUniversities(@ApiParam(value = "Assigning pairs" ,required=true )  @Valid @RequestBody AssignStudentsRequest body);


    @ApiOperation(value = "Finds students by IDs", notes = "Returns founded students", response = StudentsListResponse.class, tags={ "students", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = StudentsListResponse.class),
        @ApiResponse(code = 404, message = "Can not find ids specified in request. Please check your input and try again later.", response = Void.class),
        @ApiResponse(code = 500, message = "Some internal server errors has occured. Please try again later.", response = Void.class) })
    
    @RequestMapping(value = "/students/{parameter}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<StudentsListResponse> findStudentsById(@ApiParam(value = "Students' IDs",required=true ) @PathVariable("parameter") List<Integer> parameter);


    @ApiOperation(value = "Generate students and add into database by Criteria", notes = "Returns generated students", response = StudentsListResponse.class, tags={ "students", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = StudentsListResponse.class),
        @ApiResponse(code = 400, message = "Invalid input. Plese check your input and try again later.", response = Void.class),
        @ApiResponse(code = 500, message = "Some internal server errors has occured. Please try again later.", response = Void.class) })
    
    @RequestMapping(value = "/students/{parameter}",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<StudentsListResponse> generateStudentByCriteria(@ApiParam(value = "Criteria string",required=true ) @PathVariable("parameter") String parameter);


    @ApiOperation(value = "Generate certain amount of random students and add them into database", notes = "Returns generated students", response = StudentsListResponse.class, tags={ "students", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = StudentsListResponse.class),
        @ApiResponse(code = 400, message = "Invalid input. Please check your input and try again later.", response = Void.class),
        @ApiResponse(code = 500, message = "Some internal server errors has occured. Please try again later.", response = Void.class) })
    
    @RequestMapping(value = "/students/",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<StudentsListResponse> generateStudentsByStudentsNumber(@ApiParam(value = "Number of students to be generated" ,required=true )  @Valid @RequestBody GenerationStudentsNumber body);


    @ApiOperation(value = "Delete students by IDs", notes = "Returns deleted students' IDs", response = ListOfIdResponse.class, tags={ "students", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ListOfIdResponse.class),
        @ApiResponse(code = 400, message = "Invalid input. Please check your input and try again later.", response = Void.class),
        @ApiResponse(code = 500, message = "Some internal server errors has occured. Please try again later.", response = Void.class) })
    
    @RequestMapping(value = "/students/",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.DELETE)
    ResponseEntity<ListOfIdResponse> removeStudentsBySpecificIds(@ApiParam(value = "Students' IDs which should be deleted" ,required=true )  @Valid @RequestBody ListOfIdRequest body);


    @ApiOperation(value = "Update students information", notes = "Returns updated students", response = UpdateStudentsResponse.class, tags={ "students", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = UpdateStudentsResponse.class),
        @ApiResponse(code = 400, message = "Invalid input. Please check your input and try again later.", response = Void.class),
        @ApiResponse(code = 404, message = "Students with IDs specified in request was no founded. Please check your input and try again later.", response = Void.class),
        @ApiResponse(code = 500, message = "Some internal server errors has occured. Please try again later.", response = Void.class) })
    
    @RequestMapping(value = "/students/",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<UpdateStudentsResponse> updateStudents(@ApiParam(value = "Students' information" ,required=true )  @Valid @RequestBody UpdateStudentsRequest body);

}
